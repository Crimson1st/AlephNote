<Window x:Class="AlephNote.WPF.Windows.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:windows="clr-namespace:AlephNote.WPF.Windows"
        xmlns:conv="clr-namespace:MSHC.WPF.Converter;assembly=WPFUtils"
        xmlns:locconv="clr-namespace:AlephNote.WPF.Converter"
        xmlns:scinet="clr-namespace:ScintillaNET;assembly=ScintillaNET"
        xmlns:ctrl="clr-namespace:AlephNote.WPF.Controls"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:mext="clr-namespace:MSHC.WPF.MarkupExtensions;assembly=WPFUtils"
        xmlns:util="clr-namespace:AlephNote.WPF.Util"
        xmlns:ext="clr-namespace:AlephNote.WPF.Extensions"
        xmlns:proxy="clr-namespace:MSHC.WPF.BindingProxies;assembly=WPFUtils"
        xmlns:services="clr-namespace:MSHC.WPF.Services;assembly=WPFUtils"
        xmlns:notesView="clr-namespace:AlephNote.WPF.Controls.NotesView"
        mc:Ignorable="d" 
        Icon="/Resources/IconMain.png"
        WindowState="{Binding WindowState}"
        d:DataContext="{d:DesignInstance windows:MainWindowViewmodel}"
        ResizeMode="CanResizeWithGrip"
        StateChanged="{mext:EventBinding StateChangedEvent, CommandParameter=$e}"
        Closing="{mext:EventBinding ClosingEvent, CommandParameter=$e}"
        Closed="{mext:EventBinding CloseEvent, CommandParameter=$e}"
        Loaded="MainWindow_OnLoaded"
        KeyDown="MainWindow_OnKeyDown"
        PreviewKeyDown="MainWindow_OnPreviewKeyDown"
        Topmost="{Binding Settings.AlwaysOnTop}"
        Background="{ext:ThemeBinding 'window.background'}"
        FontFamily="{Binding Settings.UIFontFamily, Converter={locconv:FontNameToFontFamily}}"
        Title="AlephNote" Height="350" Width="525">

	<Window.Resources>
		<conv:MultiBoolToVisibility x:Key="MB2V" />
		<conv:MultiBoolOperator     x:Key="MBOP" />

		<Style TargetType="ctrl:AutoActionMenuItem">
			<Setter Property="Foreground" Value="{ext:ThemeBinding 'window.menubar.submenu:foreground'}" />
		</Style>

		<Style x:Key="SubMenuItemStyle" TargetType="MenuItem">
			<Setter Property="Foreground" Value="{ext:ThemeBinding 'window.menubar.submenu:foreground'}" />
		</Style>

	</Window.Resources>

	<Grid x:Name="LayoutRoot">
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="1*"/>
			<RowDefinition Height="Auto"/>
		</Grid.RowDefinitions>

		<Menu Grid.Row="0"
		      FontFamily="{Binding Settings.UIFontFamily, Converter={locconv:FontNameToFontFamily}}"
			  Visibility="{Binding MenuIsVisible, Converter={conv:BoolToVisibility}, ConverterParameter='Visible;Collapsed'}"
			  Background="{ext:ThemeBinding 'window.menubar:background'}"
			  Foreground="{ext:ThemeBinding 'window.menubar:foreground'}">
			<MenuItem Header="_File">
				<ctrl:AutoActionMenuItem Header="New Note"                  AlephAction="NewNote"              Settings="{Binding Settings}"  />
				<ctrl:AutoActionMenuItem Header="New Note (from clipboard)" AlephAction="NewNoteFromClipboard" Settings="{Binding Settings}"  />
				<ctrl:AutoActionMenuItem Header="New Note (from text file)" AlephAction="NewNoteFromTextFile"  Settings="{Binding Settings}" />
				<Separator />
				<ctrl:AutoActionMenuItem Header="Duplicate Note"            AlephAction="DuplicateNote"        Settings="{Binding Settings}" />
				<ctrl:AutoActionMenuItem Header="Pin / Unpin Note"          AlephAction="PinUnpinNote"         Settings="{Binding Settings}" />
				<ctrl:AutoActionMenuItem Header="Lock / Unlock Note"        AlephAction="LockUnlockNote"       Settings="{Binding Settings}" />
                <ctrl:AutoActionMenuItem Header="Export Note"               AlephAction="ExportNote"           Settings="{Binding Settings}" />
                <ctrl:AutoActionMenuItem Header="Delete Note"               AlephAction="DeleteNote"           Settings="{Binding Settings}" />
                <Separator />
                <ctrl:AutoActionMenuItem Header="Export all as Markdown + Front Matter" AlephAction="ExportFrontmatter" Settings="{Binding Settings}" />
                <Separator />
                <ctrl:AutoActionMenuItem Header="Exit"                      AlephAction="AppExit"              Settings="{Binding Settings}"  />
			</MenuItem>
			<MenuItem Header="_Edit">
				<ctrl:AutoActionMenuItem Header="Settings" AlephAction="ShowSettings" Settings="{Binding Settings}"  />
				<Separator />
				<ctrl:AutoActionMenuItem Header="Synchronize now" AlephAction="Resync" Settings="{Binding Settings}"  />
                <ctrl:AutoActionMenuItem Header="Delete local data and sync new" AlephAction="FullResync" Settings="{Binding Settings}" />
                <ctrl:AutoActionMenuItem Header="Force send all local notes to the server" AlephAction="FullUpload" Settings="{Binding Settings}" />
                <Separator />
				<MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Insert Snippet" UsesItemContainerTemplate="True" ItemsSource="{Binding Settings.Snippets, Converter={locconv:SnippetsToSnippetSource}}" >
					<MenuItem.Resources>
						<ItemContainerTemplate DataType="{x:Type locconv:SnippetElem}">
							<ctrl:AutoActionMenuItem />
						</ItemContainerTemplate>
					</MenuItem.Resources>

					<MenuItem.ItemContainerStyle>
						<Style TargetType="{x:Type ctrl:AutoActionMenuItem}" >
							<Setter Property="Header" Value="{Binding Header}"/>
							<Setter Property="AlephAction" Value="{Binding AlephAction}"/>
							<Setter Property="Settings" Value="{Binding DataContext.Settings, ElementName=LayoutRoot}"/>
							<Setter Property="ParentAnchor" Value="{Binding ., ElementName=LayoutRoot}"/>
							<Setter Property="Foreground" Value="{ext:ThemeBinding 'window.menubar.submenu:foreground'}" />
						</Style>
					</MenuItem.ItemContainerStyle>

					<MenuItem.ItemContainerTemplateSelector>
						<util:MenuItemContainerTemplateSelector>
							<DataTemplate>
								<ctrl:AutoActionMenuItem />
							</DataTemplate>
						</util:MenuItemContainerTemplateSelector>
					</MenuItem.ItemContainerTemplateSelector>
				</MenuItem>
				<MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Insert" UsesItemContainerTemplate="True">
					<ctrl:AutoActionMenuItem Header="Hyperlink"                 AlephAction="InsertHyperlink"           Settings="{Binding Settings}" />
					<ctrl:AutoActionMenuItem Header="Link to local file"        AlephAction="InsertFilelink"            Settings="{Binding Settings}" />
					<ctrl:AutoActionMenuItem Header="Shortcut to another note"  AlephAction="InsertNotelink"            Settings="{Binding Settings}" />
					<ctrl:AutoActionMenuItem Header="Clickable mail address"    AlephAction="InsertMaillink"            Settings="{Binding Settings}" />
				</MenuItem>
			</MenuItem>
			<MenuItem Header="_View">
				<MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Note preview style">
					<ctrl:AutoActionMenuItem Header="Simple one line"             AlephAction="SetPreviewStyleSimple"            IsChecked="{Binding Settings.NotePreviewStyle, Converter={conv:EnumValueToBoolean}, ConverterParameter='Simple'}"             Settings="{Binding Settings}"  />
					<ctrl:AutoActionMenuItem Header="One line with date"          AlephAction="SetPreviewStyleExtended"          IsChecked="{Binding Settings.NotePreviewStyle, Converter={conv:EnumValueToBoolean}, ConverterParameter='Extended'}"           Settings="{Binding Settings}"  />
					<ctrl:AutoActionMenuItem Header="Title and first line"        AlephAction="SetPreviewStyleSingleLinePreview" IsChecked="{Binding Settings.NotePreviewStyle, Converter={conv:EnumValueToBoolean}, ConverterParameter='SingleLinePreview'}"  Settings="{Binding Settings}"  />
					<ctrl:AutoActionMenuItem Header="Multiple lines with preview" AlephAction="SetPreviewStyleFullPreview"       IsChecked="{Binding Settings.NotePreviewStyle, Converter={conv:EnumValueToBoolean}, ConverterParameter='FullPreview'}"        Settings="{Binding Settings}"  />
				</MenuItem>
				<MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Note sorting">
					<ctrl:AutoActionMenuItem Header="None"               AlephAction="SetNoteSortingNone"               IsChecked="{Binding Settings.NoteSorting, Converter={conv:EnumValueToBoolean}, ConverterParameter='None'}"               Settings="{Binding Settings}"  />
					<ctrl:AutoActionMenuItem Header="Title"              AlephAction="SetNoteSortingByName"             IsChecked="{Binding Settings.NoteSorting, Converter={conv:EnumValueToBoolean}, ConverterParameter='ByName'}"             Settings="{Binding Settings}"  />
					<ctrl:AutoActionMenuItem Header="Creation date"      AlephAction="SetNoteSortingByCreationDate"     IsChecked="{Binding Settings.NoteSorting, Converter={conv:EnumValueToBoolean}, ConverterParameter='ByCreationDate'}"     Settings="{Binding Settings}"  />
					<ctrl:AutoActionMenuItem Header="Last modified date" AlephAction="SetNoteSortingByModificationDate" IsChecked="{Binding Settings.NoteSorting, Converter={conv:EnumValueToBoolean}, ConverterParameter='ByModificationDate'}" Settings="{Binding Settings}"  />
				</MenuItem>
				<ctrl:AutoActionMenuItem Header="Always on Top"        AlephAction="ToggleAlwaysOnTop" IsChecked="{Binding Settings.AlwaysOnTop}"    Settings="{Binding Settings}"  />
				<ctrl:AutoActionMenuItem Header="Display Line Numbers" AlephAction="ToggleLineNumbers" IsChecked="{Binding Settings.SciLineNumbers}" Settings="{Binding Settings}"  />
				<ctrl:AutoActionMenuItem Header="Word Wrap"            AlephAction="ToggleWordWrap"    IsChecked="{Binding Settings.SciWordWrap}"    Settings="{Binding Settings}"  />
				<ctrl:AutoActionMenuItem Header="Readonly mode"        AlephAction="ToggleReadonly"    IsChecked="{Binding Settings.IsReadOnlyMode}" Settings="{Binding Settings}"  />
			</MenuItem>
			<MenuItem Header="_Help">
				<ctrl:AutoActionMenuItem Header="Check for Updates"  AlephAction="CheckForUpdates" Settings="{Binding Settings}"  />
				<ctrl:AutoActionMenuItem Header="Show Log"           AlephAction="ShowLog"        Settings="{Binding Settings}"  />
				<ctrl:AutoActionMenuItem Header="About"              AlephAction="ShowAbout"      Settings="{Binding Settings}"  />
			</MenuItem>
			<MenuItem Header="_Debug" Visibility="{Binding DebugMode, Converter={conv:BoolToVisibility}, ConverterParameter=Visible;Collapsed}">
				<MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Show interactive theme editor" Command="{Binding DebugShowThemeEditorCommand}" />
				<MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Remove theme" Command="{Binding DebugShowDefaultThemeCommand}" />
				<MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Disco Fever" Command="{Binding DebugDiscoThemeCommand}" />
				<Separator/>
				<MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Create 1 Note (Lorem Ipsum)" Command="{Binding DebugCreateIpsumNotesCommand}" CommandParameter="1" />
				<MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Create 10 Notes (Lorem Ipsum)" Command="{Binding DebugCreateIpsumNotesCommand}" CommandParameter="10" />
				<MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Create 100 Notes (Lorem Ipsum)" Command="{Binding DebugCreateIpsumNotesCommand}" CommandParameter="100" />
				<Separator/>
                <MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Compare Notes" Command="{Binding DebugNoteDiffCommand}" /> 
                <Separator/>
                <MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Serialize Settings" Command="{Binding DebugSerializeSettingsCommand}" />
                <MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Serialize Repository SyncData" Command="{Binding DebugSerializeRepositorySyncDataCommand}" />
                <MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Serialize CurrentNote" Command="{Binding DebugSerializeNoteCommand}" />
				<Separator/>
                <MenuItem Style="{StaticResource SubMenuItemStyle}" Header="NotesViewControl.RefreshView()" Command="{Binding DebugRefreshViewCommand}" />
                <Separator/>
                <MenuItem Style="{StaticResource SubMenuItemStyle}" Header="Remote" ItemsSource="{Binding Repository.RemoteAccountDebugCommands}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="MenuItem" BasedOn="{StaticResource SubMenuItemStyle}">
                            <Setter Property="Command" Value="{Binding Command}" />
                            <Setter Property="CommandParameter" Value="{Binding DataContext.Repository, ElementName=LayoutRoot}" />
                            <Setter Property="Header" Value="{Binding Header}" />
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
            </MenuItem>
		</Menu>

		<ctrl:MainCenterGrid Grid.Row="1" OverviewWidth="{Binding OverviewListWidth, Mode=TwoWay}" VerticalMode="{Binding Settings.VerticalMainLayout}">

			<Grid Margin="1" Grid.Column="0" ctrl:MainCenterGrid.ChildType="NoteList">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="{Binding Settings.HideAddNoteButton, Converter={conv:BoolToGridLength}, ConverterParameter=0;26}"/>
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto"/>
					<RowDefinition Height="1*"/>
				</Grid.RowDefinitions>

				<Button Grid.Row="0" Grid.Column="0" Margin="2" Padding="0" FontWeight="Bold" x:Name="TagPopupButton"
			        Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" 
			        Foreground="{ext:ThemeBinding 'window.globalsearch.tagbutton:foreground'}" 
			        Background="{ext:ThemeBinding 'window.globalsearch.tagbutton:background'}" 
			        BorderThickness="{ext:ThemeBinding 'window.globalsearch.tagbutton:border_thickness'}"
			        BorderBrush="{ext:ThemeBinding 'window.globalsearch.tagbutton:border'}" 
			        Visibility="{Binding Settings.HideTagChooser, Converter={conv:BoolToVisibility}, ConverterParameter=Collapsed;Visible}"
			        Command="{Binding ShowTagFilterCommand}">
					<Image Source="{ext:ThemeBinding 'tag.png', ResType='ImageSource'}" Margin="2" />
				</Button>


				<Popup Grid.Row="0" Grid.Column="0" StaysOpen="False" Placement="Bottom" PlacementTarget="{Binding ElementName=TagPopupButton}" x:Name="TagPopup" AllowsTransparency="True">
					<Border 
					Padding="{ext:ThemeBinding 'window.globalsearch.tagbutton.popup:padding'}" 
					Margin="{ext:ThemeBinding 'window.globalsearch.tagbutton.popup:margin'}" 
					Background="{ext:ThemeBinding 'window.globalsearch.tagbutton.popup:background'}" 
					BorderBrush="{ext:ThemeBinding 'window.globalsearch.tagbutton.popup:bordercolor'}"
					BorderThickness="{ext:ThemeBinding 'window.globalsearch.tagbutton.popup:border_thickness'}">
						<ScrollViewer MaxHeight="200" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Auto">
							<ItemsControl Width="200" x:Name="TagPopupList">
								<ItemsControl.ItemsPanel>
									<ItemsPanelTemplate>
										<StackPanel Orientation="Vertical" Background="{ext:ThemeBinding 'window.globalsearch.tagbutton.popup:background'}" />
									</ItemsPanelTemplate>
								</ItemsControl.ItemsPanel>
								<ItemsControl.ItemTemplate>
									<DataTemplate>
										<CheckBox Content="{Binding Name}" IsChecked="{Binding Checked}" Foreground="{ext:ThemeBinding 'window.globalsearch.tagbutton.popup:foreground'}" />
									</DataTemplate>
								</ItemsControl.ItemTemplate>
							</ItemsControl>
						</ScrollViewer>
					</Border>
				</Popup>

				<ctrl:GlobalSearchTextBox Grid.Row="0" Grid.Column="1" Margin="0,2" 
                                          SearchText="{Binding SearchText, UpdateSourceTrigger=PropertyChanged}" 
                                          SearchDelayMode="{Binding Settings.GlobalSearchDelay}" 
                                          NoteCount="{Binding Repository.Notes.Count}"
										  Visibility="{Binding Settings.HideSearchBox, Converter={conv:BoolToVisibility}, ConverterParameter=Collapsed;Visible}"
                                          x:Name="GlobalSearchBar" />

				<Button Grid.Row="0" Grid.Column="2" Margin="2" Padding="0" FontWeight="Bold" 
					Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" 
					Foreground="{ext:ThemeBinding 'window.globalsearch.button:foreground'}" 
					Background="{ext:ThemeBinding 'window.globalsearch.button:background'}" 
					BorderThickness="{ext:ThemeBinding 'window.globalsearch.button:border_thickness'}"
					BorderBrush="{ext:ThemeBinding 'window.globalsearch.button:border'}" 
					IsEnabled="{Binding Settings.IsReadOnlyMode, Converter={conv:NegateBool}}"
			        Visibility="{Binding Settings.HideAddNoteButton, Converter={conv:BoolToVisibility}, ConverterParameter=Collapsed;Visible}"
					Command="{Binding CreateNewNoteCommand}">
					<Image Source="{ext:ThemeBinding 'plus.png', ResType='ImageSource'}" Margin="2" />
				</Button>

				<ContentControl Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="3"  x:Name="NotesViewCtrlWrapper">
					<ContentControl.Resources>

						<ControlTemplate x:Key="TemplateFlat" >
							<notesView:NotesViewFlat
									NotesListDrop="NotesList_Drop"
									NotesListKeyDown="NotesList_KeyDown"
									ParentAnchor="{Binding ., ElementName=LayoutRoot}"
									Settings="{Binding Settings}"
									SelectedNote="{Binding SelectedNote}"
									SelectedNotesList="{Binding AllSelectedNotes, Mode=OneWayToSource}"
									AllNotes="{Binding Repository.Notes}" 
									SearchText="{Binding SearchText}" />
						</ControlTemplate>

						<ControlTemplate x:Key="TemplateHierarchical">
							<notesView:NotesViewHierarchical
									NotesListDrop="NotesList_Drop"
									NotesListKeyDown="NotesList_KeyDown"
									GridSplitterChanged="VertGridSplitterChanged"
									ParentAnchor="{Binding ., ElementName=LayoutRoot}"
									Settings="{Binding Settings}"
									RepositoryAccountID="{Binding Repository.ConnectionUUID}"
									AllNotes="{Binding Repository.Notes}" 
									SelectedNote="{Binding SelectedNote}"
									SelectedNotesList="{Binding AllSelectedNotes, Mode=OneWayToSource}"
									SelectedFolderPath="{Binding SelectedFolderPath}"
									SearchText="{Binding SearchText}" />
						</ControlTemplate>

					</ContentControl.Resources>
				</ContentControl>

			</Grid>

			<GridSplitter Grid.Column="1" ctrl:MainCenterGrid.ChildType="Splitter"
					  Background="{ext:ThemeBinding 'window.splitter'}"
					  HorizontalAlignment="Stretch" Width="3" Focusable="False" />

			<Grid Margin="1" Grid.Column="2" ctrl:MainCenterGrid.ChildType="NoteView" Visibility="{Binding SelectedNote, Converter={conv:IsNullToVisibility}, ConverterParameter=Hidden;Visible}" >
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="1*"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto"/>
					<RowDefinition Height="Auto"/>
					<RowDefinition Height="Auto"/>
					<RowDefinition Height="1*"/>
				</Grid.RowDefinitions>

				<TextBox Grid.Row="0" BorderBrush="Transparent" BorderThickness="0"  
					 x:Name="TitleTextBox"
					 Background="Transparent"
					 Foreground="{ext:ThemeBinding 'window.notetitle:foreground'}" 
					 CaretBrush="{ext:ThemeBinding 'window.notetitle:caret'}" 
					 FontSize="{Binding Settings.TitleFontSize, Converter={locconv:FontSizeToInt}}" 
					 FontFamily="{Binding Settings.TitleFontFamily, Converter={locconv:FontNameToFontFamily}}" 
					 FontWeight="{Binding Settings.TitleFontModifier, Converter={locconv:FontModifierToFontWeight}}" 
					 FontStyle="{Binding Settings.TitleFontModifier, Converter={locconv:FontModifierToFontStyle}}" 
					 Text="{Binding SelectedNote.Title, UpdateSourceTrigger=PropertyChanged}" >
					<TextBox.InputBindings>
						<KeyBinding Key="Return" Command="{Binding TitleEnterCommand}"/>
					</TextBox.InputBindings>
					<TextBox.IsReadOnly>
						<MultiBinding Converter="{StaticResource MBOP}" ConverterParameter="OR">
							<Binding Path="Settings.IsReadOnlyMode" />
							<Binding Path="SelectedNote.IsLocked" />
						</MultiBinding>
					</TextBox.IsReadOnly>
					<services:WatermarkService.Watermark>
						<TextBlock Text="Empty Title..." VerticalAlignment="Center" Padding="2,0"
					           Foreground="{ext:ThemeBinding 'window.notetitle.placeholder'}"
							   FontSize="{Binding Settings.TitleFontSize, Converter={locconv:FontSizeToInt}}" 
							   FontFamily="{Binding Settings.TitleFontFamily, Converter={locconv:FontNameToFontFamily}}" 
							   FontWeight="{Binding Settings.TitleFontModifier, Converter={locconv:FontModifierToFontWeight}}" 
							   FontStyle="{Binding Settings.TitleFontModifier, Converter={locconv:FontModifierToFontStyle}}" />
					</services:WatermarkService.Watermark>
				</TextBox>

				<Image Grid.Row="0" Grid.Column="1" Margin="2,0"
				   Cursor="Hand"
				   MouseDown="ImageLock_MouseDown"
				   HorizontalAlignment="Right" 
				   Source="{Binding Settings.IsReadOnlyMode, Converter={locconv:ReadonlyToLockIcon}}" 
				   Height="{Binding Settings.TitleFontSize, Converter={locconv:FontSizeToInt}}" >

					<Image.Visibility>
						<MultiBinding Converter="{StaticResource MB2V}" ConverterParameter="OR;Visible;Collapsed">
							<Binding Path="Settings.IsReadOnlyMode" />
							<Binding Path="Settings.ShowReadonlyLock" />
						</MultiBinding>
					</Image.Visibility>

				</Image>

				<ctrl:TagEditor2 Grid.Row="1" Grid.Column="0"
			                 x:Name="TagEditor"
			                 TagSource="{Binding SelectedNote.Tags}"
			                 Repository="{Binding Repository}"
			                 Settings="{Binding Settings}"
			                 Changed="TagEditor_OnChanged">
					<ctrl:TagEditor2.Readonly>
						<MultiBinding Converter="{StaticResource MBOP}" ConverterParameter="OR">
							<Binding Path="Settings.IsReadOnlyMode" />
							<Binding Path="SelectedNote.IsLocked" />
							<Binding Path="Repository.SupportsTags" Converter="{conv:NegateBool}" />
						</MultiBinding>
					</ctrl:TagEditor2.Readonly>
				</ctrl:TagEditor2>

				<StackPanel Grid.Row="1" Grid.Column="1" VerticalAlignment="Bottom" Orientation="Horizontal" Margin="8,2">
					<TextBlock Text="*" 
						   Foreground="{ext:ThemeBinding 'window.changedate:foreground'}" 
						   Visibility="{Binding SelectedNote.IsLocalSaved, Converter={conv:BoolToVisibility}, ConverterParameter=Collapsed;Visible}" />
					<TextBlock Text="{Binding SelectedNote.ModificationDate, Converter={conv:SmartDateTimeToDisplay}}" 
						   ToolTip="{Binding SelectedNote.DateTooltip}" 
						   Foreground="{ext:ThemeBinding 'window.changedate:foreground'}" />
				</StackPanel>

				<ctrl:PathEditor Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" x:Name="PathEditor"
							 Visibility="{Binding Settings.UseHierarchicalNoteStructure, Converter={conv:BoolToVisibility}, ConverterParameter='Visible;Collapsed'}"
							 Settings="{Binding Settings}"
							 SelectedNote="{Binding SelectedNote}"
							 SelectedFolderPath="{Binding SelectedFolderPath}" />

				<Grid Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2">
					<Grid.RowDefinitions>
						<RowDefinition Height="*"/>
						<RowDefinition Height="Auto"/>
					</Grid.RowDefinitions>

					<Border Grid.Row="0" BorderThickness="1" BorderBrush="{ext:ThemeBinding 'scintilla.bordercolor'}" SnapsToDevicePixels="True" Margin="0,1,2,0" >
						<WindowsFormsHost x:Name="NoteEditHost">
							<WindowsFormsHost.Child>
								<scinet:Scintilla x:Name="NoteEdit" AllowDrop="True"
								                  UpdateUI="NoteEdit_UpdateUI"
								                  MouseWheel="NoteEdit_OnMouseWheel"
								                  KeyPress="NoteEdit_OnKeyPress" 
								                  KeyDown="NoteEdit_OnKeyDown" 
								                  StyleNeeded="NoteEdit_StyleNeeded" 
								                  MarginClick="NoteEdit_MarginClick"
								                  HotspotClick="NoteEdit_HotspotClick" 
								                  Insert="NoteEdit_OnInsert"
								                  Delete="NoteEdit_OnDelete"
								                  HotspotDoubleClick="NoteEdit_HotspotDoubleClick" />
							</WindowsFormsHost.Child>
						</WindowsFormsHost>
					</Border>

					<ctrl:SearchBox x:Name="DocumentSearchBar" Grid.Row="1" Height="28" HideBox="OnHideDoumentSearchBox" Target="{Binding ElementName=NoteEdit}" Settings="{Binding Settings}" />
				</Grid>

				<proxy:LegacyStringBinding Grid.Row="0" Grid.Column="0" 
									   Element="{Binding ElementName=NoteEdit}" 
									   PropertyPath="Text" ChangedEventPath="TextChanged" TargetBinding="{Binding SelectedNote.Text}" 
									   OnBeforePropertySet="NoteEdit_OnBeforeTextSet"
									   OnAfterPropertySet="NoteEdit_OnAfterTextSet"/>

			</Grid>

		</ctrl:MainCenterGrid>

		<StatusBar Grid.Row="2"
		           FontFamily="{Binding Settings.UIFontFamily, Converter={locconv:FontNameToFontFamily}}"
				   Background="{ext:ThemeBinding 'window.statusbar:background'}"
				   Foreground="{ext:ThemeBinding 'window.statusbar:foreground'}">
			<StatusBar.Resources>
				<Style TargetType="StatusBarItem">
					<Setter Property="FontSize" Value="10" />
				</Style>
			</StatusBar.Resources>

			<StatusBarItem  Content="Last Synchronized: " />
			<StatusBarItem Content="{Binding LastSynchronizedText}" />
			<Button ToolTip="Synchronize Now" Padding="0" BorderThickness="0" Height="14" 
					Background="{ext:ThemeBinding 'window.statusbar.btnReload:background'}"
					Foreground="{ext:ThemeBinding 'window.statusbar.btnReload:foreground'}"
					BorderBrush="{ext:ThemeBinding 'window.statusbar.btnReload:border'}"
					Command="{Binding ResyncCommand}" 
					Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"   >
				<Image Source="{ext:ThemeBinding 'refresh.png', ResType='ImageSource'}" />
			</Button>
			<Separator Margin="5,2" Foreground="Beige" />
			<StatusBarItem Content="Length: " Visibility="{Binding AllSelectedNotes.Count, Converter={conv:IntegerEqualsToVisibility}, ConverterParameter='1;Visible;Collapsed'}" />
			<StatusBarItem Content="{Binding SelectedNote.Text.Length, FallbackValue=''}" Visibility="{Binding AllSelectedNotes.Count, Converter={conv:IntegerEqualsToVisibility}, ConverterParameter='1;Visible;Collapsed'}" />
			<StatusBarItem Content="Lines: " Visibility="{Binding AllSelectedNotes.Count, Converter={conv:IntegerEqualsToVisibility}, ConverterParameter='1;Visible;Collapsed'}" />
			<StatusBarItem Content="{Binding SelectedNote.Text, Converter={conv:TextToLines}, FallbackValue=''}" Visibility="{Binding AllSelectedNotes.Count, Converter={conv:IntegerEqualsToVisibility}, ConverterParameter='1;Visible;Collapsed'}" />
			<StatusBarItem Content="Created: " Visibility="{Binding AllSelectedNotes.Count, Converter={conv:IntegerEqualsToVisibility}, ConverterParameter='1;Visible;Collapsed'}" />
            <StatusBarItem Content="{Binding SelectedNote.CreationDate, Converter={conv:DateOnlyToDisplay}, FallbackValue=''}" ToolTip="{Binding SelectedNote.DateTooltip, FallbackValue=''}" Visibility="{Binding AllSelectedNotes.Count, Converter={conv:IntegerEqualsToVisibility}, ConverterParameter='1;Visible;Collapsed'}" />
			<StatusBarItem Content="Synchronized: " Visibility="{Binding AllSelectedNotes.Count, Converter={conv:IntegerEqualsToVisibility}, ConverterParameter='1;Visible;Collapsed'}" />
			<StatusBarItem Content="{Binding SelectedNote.IsRemoteSaved, FallbackValue='?'}" Visibility="{Binding AllSelectedNotes.Count, Converter={conv:IntegerEqualsToVisibility}, ConverterParameter='1;Visible;Collapsed'}" />
			<StatusBarItem Content="Selected notes: " Visibility="{Binding AllSelectedNotes.Count, Converter={conv:IntegerGreaterToVisibility}, ConverterParameter='1;Visible;Collapsed'}" />
			<StatusBarItem Content="{Binding AllSelectedNotes.Count}" Visibility="{Binding AllSelectedNotes.Count, Converter={conv:IntegerGreaterToVisibility}, ConverterParameter='1;Visible;Collapsed'}" />
			<ctrl:ConnectionDisplayControl Settings="{Binding Settings}" Repository="{Binding Repository}" ChangeAccount="CDC_DoChangeAccount"  HorizontalAlignment="Right" Margin="0,0,15,0"/>
		</StatusBar>

		<tb:TaskbarIcon Grid.Column="0" Grid.Row="0"
			x:Name="TrayIcon"
			Visibility="Visible"
			ToolTipText="{Binding FullVersion}"
			TrayRightMouseDown="TrayIcon_TrayRightMouseDown"
			LeftClickCommand="{Binding ShowMainWindowCommand}"
			DoubleClickCommand="{Binding ShowMainWindowCommand}">

			<tb:TaskbarIcon.ContextMenu>
				<ContextMenu>
					<ctrl:AutoActionMenuItem Header="New Note" AlephAction="NewNote" />
					<ctrl:AutoActionMenuItem Header="New Note (from clipboard)" AlephAction="NewNoteFromClipboard" />
					<Separator />
					<ctrl:AutoActionMenuItem Header="Restore" AlephAction="ShowMainWindow" />
					<ctrl:AutoActionMenuItem Header="Synchronize Now" AlephAction="Resync" />
					<Separator />
					<ctrl:AutoActionMenuItem Header="Exit" AlephAction="AppExit" />
				</ContextMenu>
			</tb:TaskbarIcon.ContextMenu>

		</tb:TaskbarIcon>

	</Grid>
</Window>

